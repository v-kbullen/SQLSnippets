/*------------------------------------------------------------------------------ 
* Copyright © 2020 Microsoft Corporation.  All rights reserved. 
* 
* THIS CODE AND ANY ASSOCIATED INFORMATION ARE PROVIDED “AS IS” WITHOUT 
* WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
* LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS 
* FOR A PARTICULAR PURPOSE. THE ENTIRE RISK OF USE, INABILITY TO USE, OR  
* RESULTS FROM THE USE OF THIS CODE REMAINS WITH THE USER. 
* 
*------------------------------------------------------------------------------ 
* TRANSACT-SQL Code 
* 
* Description: 
*    This script aims to explain the SQL Server Object allocation AlGOrithm the  
*    and the behind the scene activities when a row is inserted into the table. 
* 
* VERSION: 
*    1.0 Developed for SQL Server 2014
*    2.0 Adjusted for SQL Server 2019 and later (Including new DMV's)
*------------------------------------------------------------------------------*/
USE [master]
GO

DROP DATABASE IF EXSITS SQLDataStructures
GO

CREATE DATABASE SQLDataStructures
GO

ALTER DATABASE SQLDataStructures SET RECOVERY SIMPLE
GO

USE SQLDataStructures
GO 

DROP TABLE IF EXISTS SQLObjectAllocation
GO

CREATE TABLE SQLObjectAllocation (Col1 int, Col2 float, Col3 varchar(8000), Col4 datetime, Col5 varchar(8000))
GO
INSERT INTO SQLObjectAllocation VALUES (1,2.0,Replicate ('A',2000), getdate(), Replicate('B',1000))
GO

-- This object has two allocation unit types, pages for IN_ROW_DATA and pages for ROW_OVERFLOW_DATA which is calculated based on the data types and lenght. 
-- Notice that the table called SQLObjectAllocation has a total of 9 pages for IN_ROW_DATA where two of them are used.
-- Notice that the table called SQLObjectAllocation has a total of 0 pages for ROW_OVERFLOW_DATA.
SELECT * 
FROM sys.allocation_units AS [au]
INNER JOIN sys.partitions AS [pr] on au.container_id=pr.partition_id
WHERE pr.object_id=object_id('SQLObjectAllocation')
GO

-- note the page_id of the first data page, page_id = ___ and ___
-- note that all allocation units are IN_ROW_DATA
SELECT * FROM sys.dm_db_database_page_allocations(DB_ID(),OBJECT_ID('SQLObjectAllocation'),null,null,'LIMITED')
GO

Select db_id() -- Note down the Database ID, we would need it in the subsequent commands.
GO
DBCC TRACEON (3604,-1)
GO
-- view first data page for the SQLObjectAllocation object
--m_type.
DBCC PAGE (6, 1, 312, 3)
-- Notice the Record Size for the Table would be 3033 Bytes + Row Header Information 
-- Slot 0 Offset 0x60 Length 3033
GO

-- The maximum amount of data and overhead that is contained in a single row on a page is 8,060 bytes (8 KB). 
-- Let's update this row

UPDATE SQLObjectAllocation
SET Col3=Replicate ('A',8000)
GO

-- Notice that the table called SQLObjectAllocation has a total of 9 pages for ROW_OVERFLOW_DATA where two of them are used..
SELECT * 
FROM sys.allocation_units AS [au]
INNER JOIN sys.partitions AS [pr] on au.container_id=pr.partition_id
WHERE pr.object_id=object_id('SQLObjectAllocation')
GO

SELECT * FROM sys.dm_db_database_page_allocations(DB_ID(),OBJECT_ID('SQLObjectAllocation'),null,null,'LIMITED')
GO


-- view first row over flow page for the SQLObjectAllocation object
--m_type.
DBCC PAGE (6, 1, 320, 3)
-- Notice the Record Size for the Table would be 3033 Bytes + Row Header Information 
-- Blob row at: Page (1:320) Slot 0 Length: 8014 Type: 3 (DATA)
-- Blob Id:482213888
GO


-- Review again the Data Page for IN_ROW_DATA
DBCC PAGE (6, 1, 312, 3)
GO
-- Notice the slot size and the pointer to the Row Overflow Data page and size
 
-- Slot 0 Offset 0x60 Length 1057
-- ......
--Col3 = [BLOB Inline Root] Slot 0 Column 3 Offset 0x21 Length 24 Length (physical) 24

--Level = 0                           Unused = 0                          UpdateSeq = 1
--TimeStamp = 482213888               Type = 2                            
--Link 0

--Size = 8000                         RowId = (1:320:0)                   
