/*
This Sample Code is provided for the purpose of illustration only and is not intended to be used in a production environment.  
THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.  
We grant You a nonexclusive, royalty-free right to use and modify the 
Sample Code and to reproduce and distribute the object code form of the Sample Code, provided that You agree: (i) to not use Our name, logo, or trademarks to market Your software product in which the Sample Code is embedded; 
(ii) to include a valid copyright notice on Your software product in which the Sample Code is 
embedded; and 
(iii) to indemnify, hold harmless, and defend Us and Our suppliers from and against any claims or lawsuits, including attorneysâ€™ fees, that arise or result from the use or distribution of the Sample Code.
Please note: None of the conditions outlined in the disclaimer above will supercede the terms and conditions contained within the Premier Customer Services Description.
*/

USE AdventureWorks2022
GO

DROP TABLE IF EXISTS [dbo].[ExpandedSalesOrderDetail_Rowstore];
DROP TABLE IF EXISTS [dbo].[ExpandedSalesOrderDetail_Rowstore_Compressed];
DROP TABLE IF EXISTS [dbo].[ExpandedSalesOrderDetail_Columnstore];
GO

-- create new rowstore table
CREATE TABLE [dbo].[ExpandedSalesOrderDetail_Rowstore](
[Id] [int] identity(1,1) primary key nonclustered,
[SalesOrderID] [int] NOT NULL,
[SalesOrderDetailID] [int] NOT NULL,
[CarrierTrackingNumber] [nvarchar](25) NULL,
[OrderQty] [smallint] NOT NULL,
[ProductID] [int] NOT NULL,
[SpecialOfferID] [int] NOT NULL,
[UnitPrice] [money] NOT NULL,
[UnitPriceDiscount] [money] NOT NULL,
[LineTotal] [numeric](38, 6) NOT NULL,
[rowguid] [uniqueidentifier] NOT NULL,
[ModifiedDate] [datetime] NOT NULL
) ON [PRIMARY]
GO

-- create new rowstore compressed table
CREATE TABLE [dbo].[ExpandedSalesOrderDetail_Rowstore_Compressed](
[Id] [int] identity(1,1) primary key nonclustered,
[SalesOrderID] [int] NOT NULL,
[SalesOrderDetailID] [int] NOT NULL,
[CarrierTrackingNumber] [nvarchar](25) NULL,
[OrderQty] [smallint] NOT NULL,
[ProductID] [int] NOT NULL,
[SpecialOfferID] [int] NOT NULL,
[UnitPrice] [money] NOT NULL,
[UnitPriceDiscount] [money] NOT NULL,
[LineTotal] [numeric](38, 6) NOT NULL,
[rowguid] [uniqueidentifier] NOT NULL,
[ModifiedDate] [datetime] NOT NULL
) ON [PRIMARY]
GO

-- create new columnstore table
CREATE TABLE [dbo].[ExpandedSalesOrderDetail_Columnstore](
[Id] [int] identity(1,1) primary key nonclustered,
[SalesOrderID] [int] NOT NULL,
[SalesOrderDetailID] [int] NOT NULL,
[CarrierTrackingNumber] [nvarchar](25) NULL,
[OrderQty] [smallint] NOT NULL,
[ProductID] [int] NOT NULL,
[SpecialOfferID] [int] NOT NULL,
[UnitPrice] [money] NOT NULL,
[UnitPriceDiscount] [money] NOT NULL,
[LineTotal] [numeric](38, 6) NOT NULL,
[rowguid] [uniqueidentifier] NOT NULL,
[ModifiedDate] [datetime] NOT NULL
) ON [PRIMARY]
GO

-- create rowstore clustered index
CREATE CLUSTERED INDEX [CL_ExpandedSalesOrderDetail_Rowstore] ON [dbo].[ExpandedSalesOrderDetail_Rowstore]
([SalesOrderID],[SalesOrderDetailID])
GO

-- create rowstore compressed clustered index
CREATE CLUSTERED INDEX [CL_ExpandedSalesOrderDetail_Rowstore_Compressed] ON [dbo].[ExpandedSalesOrderDetail_Rowstore_Compressed]
([SalesOrderID],[SalesOrderDetailID])
GO

-- create columnstore clustered index
CREATE CLUSTERED COLUMNSTORE INDEX CL_ExpandedSalesOrderDetail_ColumnStore ON [ExpandedSalesOrderDetail_ColumnStore]
GO

-- load sample data into the rowstore table
INSERT INTO [dbo].[ExpandedSalesOrderDetail_Rowstore]
SELECT S1.*
FROM Sales.SalesOrderDetail S1
GO 100 --note we're loading 100 batches

-- load sample data into the rowstore table
INSERT INTO [dbo].[ExpandedSalesOrderDetail_Rowstore_Compressed]
SELECT S1.*
FROM Sales.SalesOrderDetail S1
GO 100 --note we're loading 100 batches

-- load sample data into the columnstore table
INSERT INTO [dbo].[ExpandedSalesOrderDetail_Columnstore]
SELECT TOP 1000 S1.*
FROM Sales.SalesOrderDetail S1
GO 100 --note we're loading 100 batches

--compress the rowstore compressed table
ALTER TABLE [dbo].[ExpandedSalesOrderDetail_Rowstore_Compressed] REBUILD PARTITION = ALL
WITH
(DATA_COMPRESSION = PAGE
)
GO

-- create rowstore non-clustered index on rowstore table
CREATE NONCLUSTERED INDEX [NCI_ExpandedSalesOrderDetail_Rowstore_SalesOrderId_LineTotal]
ON [dbo].[ExpandedSalesOrderDetail_Rowstore] ([SalesOrderID])
INCLUDE ([LineTotal])
GO

CREATE NONCLUSTERED INDEX [NCI_ExpandedSalesOrderDetail_Rowstore_ProductId] 
ON [dbo].[ExpandedSalesOrderDetail_Rowstore] ([ProductID])
GO

-- create rowstore compressed non-clustered index on rowstore table
CREATE NONCLUSTERED INDEX [NCI_ExpandedSalesOrderDetail_Rowstore_Compressed_SalesOrderId_LineTotal]
ON [dbo].[ExpandedSalesOrderDetail_Rowstore_Compressed] ([SalesOrderID])
INCLUDE ([LineTotal])
GO

CREATE NONCLUSTERED INDEX [NCI_ExpandedSalesOrderDetail_Rowstore_Compressed_ProductId] 
ON [dbo].[ExpandedSalesOrderDetail_Rowstore_Compressed] ([ProductID])
GO

--create non-clustered index on columnstore table
CREATE NONCLUSTERED INDEX [NCI_ExpandedSalesOrderDetail_Columnstore_SalesOrderId_LineTotal]
ON [dbo].[ExpandedSalesOrderDetail_Columnstore] ([SalesOrderID])
INCLUDE ([LineTotal])
GO

CREATE NONCLUSTERED INDEX [NCI_ExpandedSalesOrderDetail_Columnstore_ProductId] 
ON [dbo].[ExpandedSalesOrderDetail_Columnstore] ([ProductID])
GO

--notes
-- columnstore storage is more efficient (compression on column values 
-- is greater than compression on rows)

-- rowstore storage
SELECT 
    t.NAME AS TableName,
    i.name AS IndexName,
    SUM(a.total_pages) / 128 AS TotalSpaceMB
FROM 
    sys.tables t
INNER JOIN sys.indexes i ON t.OBJECT_ID = i.object_id
INNER JOIN sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id
WHERE t.NAME = 'ExpandedSalesOrderDetail_Rowstore'
    --AND i.index_id = 1
GROUP BY t.NAME, i.name;

-- rowstore compressed storage
SELECT 
    t.NAME AS TableName,
    i.name AS IndexName,
    SUM(a.total_pages) / 128 AS TotalSpaceMB
FROM 
    sys.tables t
INNER JOIN sys.indexes i ON t.OBJECT_ID = i.object_id
INNER JOIN sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id
WHERE t.NAME = 'ExpandedSalesOrderDetail_Rowstore_Compressed'
    --AND i.index_id = 1
GROUP BY t.NAME, i.name;

-- columnstore storage
SELECT 
    t.NAME AS TableName,
    i.name AS IndexName,
    SUM(a.total_pages) / 128 AS TotalSpaceMB
FROM 
    sys.tables t
INNER JOIN sys.indexes i ON t.OBJECT_ID = i.object_id
INNER JOIN sys.partitions p ON i.object_id = p.OBJECT_ID AND i.index_id = p.index_id
INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id
WHERE t.NAME = 'ExpandedSalesOrderDetail_ColumnStore'
    --AND i.index_id = 1
GROUP BY t.NAME, i.name;

-- check our columnstore rowgroups (what's the row count)

--notice:
-- 1. the total_rows from each rowgroup is 121317 
--    (or the number of rows Sales.SalesOrderDetail used to populate the table)
--    this is greater than the 102,400 rows needed to move the data directly
--    into a compressed row group.
-- 2. we have 100 row groups, we had 100 batches
SELECT * 
FROM sys.column_store_row_groups 
ORDER BY row_group_id
GO

--notice:
-- 1. the total_rows from each rowgroup is 121317 
--    (or the number of rows Sales.SalesOrderDetail used to populate the table)
--    this is greater than the 102,400 rows needed to move the data directly
--    into a compressed row group.
-- 2. we have 1200 row groups, we had 100 batches * 11 columns + 100 column_store_segments where the column_id = 65535 
--    that indicates the deleted bitmap for a rowgroup. 
--    this bitmap keeps track of rows that have been logically deleted 
--    but not yet physically removed from the columnstore index.
SELECT * 
FROM sys.column_store_segments
ORDER BY column_id, segment_id
GO

-- maintain the columnstore clustered index
ALTER INDEX [CL_ExpandedSalesOrderDetail_ColumnStore] ON [dbo].[ExpandedSalesOrderDetail_Columnstore] 
	REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = COLUMNSTORE)
GO

--check the column_store_row_groups counts again, they should be closer to the 1048576 rows max
SELECT * 
FROM sys.column_store_row_groups
ORDER BY row_group_id
GO

--check the column_store_segments counts again, they should be closer to the 1048576 rows max
SELECT * 
FROM sys.column_store_segments
ORDER BY column_id, segment_id
GO

SET STATISTICS TIME ON;
SET STATISTICS IO ON;

-- DEMO-1: 
-- A simple query just on the fact table using regular clustered index
DBCC DROPCLEANBUFFERS
GO

SELECT COUNT(DISTINCT(ProductId))
FROM dbo.ExpandedSalesOrderDetail_Rowstore 
GO
--note the execution time
-- SQL Server Execution Times:
--   CPU time = 2704 ms,  elapsed time = 472 ms.

DBCC DROPCLEANBUFFERS
GO

SELECT COUNT(DISTINCT(ProductId))
FROM dbo.ExpandedSalesOrderDetail_Rowstore_Compressed 
GO
--note the execution time
-- SQL Server Execution Times:
--   CPU time = 2955 ms,  elapsed time = 432 ms.

-- Same query on clustered columnstore index
DBCC DROPCLEANBUFFERS
GO

SELECT COUNT(DISTINCT(ProductId))
FROM dbo.ExpandedSalesOrderDetail_ColumnStore  
GO
--note the execution time
-- SQL Server Execution Times:
--   CPU time = 79 ms,  elapsed time = 94 ms.

-- DEMO-2: 
-- A simple two table join with a predicate and a group by clause on regular clustered index 
DBCC DROPCLEANBUFFERS
GO

SELECT h.TerritoryID,
       COUNT(DISTINCT h.SalesOrderID) AS NumOfSales, 
       SUM(d.LineTotal) SalesAmount
FROM dbo.ExpandedSalesOrderDetail_Rowstore d
JOIN Sales.SalesOrderHeader h on h.SalesOrderID = d.SalesOrderID
GROUP BY h.TerritoryID
ORDER BY h.TerritoryID
GO
--note the execution time
 --SQL Server Execution Times:
--   CPU time = 3032 ms,  elapsed time = 3148 ms. (no parallelism)

-- Same query on clustered ColumnStore index
DBCC DROPCLEANBUFFERS
GO

SELECT h.TerritoryID,
       COUNT(DISTINCT h.SalesOrderID) AS NumOfSales, 
       SUM(d.LineTotal) SalesAmount
FROM dbo.ExpandedSalesOrderDetail_Columnstore d
JOIN Sales.SalesOrderHeader h on h.SalesOrderID = d.SalesOrderID
GROUP BY h.TerritoryID
ORDER BY h.TerritoryID
GO
--note the execution time
-- SQL Server Execution Times:
--   CPU time = 923 ms,  elapsed time = 167 ms. (parallelism)

-- cleanup (leave if using query tuning demo)
DROP TABLE ExpandedSalesOrderDetail_Rowstore
GO
DROP TABLE ExpandedSalesOrderDetail_Columnstore
GO
